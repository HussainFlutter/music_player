// class AlbumsFoldersListViewBuilder extends StatefulWidget {
//   final List<AlbumModel>? albums;
//   final List<SongModel>? songs;
//
//   const AlbumsFoldersListViewBuilder({
//     super.key,
//     required this.albums,
//     required this.songs,
//   });
//
//   @override
//   State<AlbumsFoldersListViewBuilder> createState() =>
//       _AlbumsFoldersListViewBuilderState();
// }
//
// class _AlbumsFoldersListViewBuilderState
//     extends State<AlbumsFoldersListViewBuilder> {
//   List<SongModel>? fetchedSongs = [];
//   Future<List<SongModel>> findSongsForAlbums(int i) async {
//     final List<SongModel> songsList = [];
//
//     // Get album name and normalize
//     final String? albumName = widget.albums?[i].album.toLowerCase().trim();
//
//     // Return empty list if invalid
//     if (albumName == null || widget.songs == null) return [];
//
//     for (final song in widget.songs!) {
//       final List<String> segments = song.data.split('/');
//
//       // Get folder name from the file path
//       final String folder =
//           segments.length > 1 ? segments[segments.length - 2] : '';
//
//       // Match folder name to album name (case-insensitive)
//       if (folder.toLowerCase().contains(albumName)) {
//         songsList.add(song);
//       }
//     }
//
//     return songsList;
//   }
//
// // Create a sorted copy of albums
//   bool isNumericOnly(String? s) {
//     if (s == null || s.isEmpty) return false;
//     final numericRegex = RegExp(r'^\d+$');
//     return numericRegex.hasMatch(s);
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final sortedAlbums = List.of(widget.albums!);
//
//     sortedAlbums.sort((a, b) {
//       final aIsNum = isNumericOnly(a.album);
//       final bIsNum = isNumericOnly(b.album);
//
//       if (aIsNum && !bIsNum) return 1; // a goes after b
//       if (!aIsNum && bIsNum) return -1; // a goes before b
//       return 0; // keep original order otherwise
//     });
//     return Column(
//       children: [
//         TextFormField(
//           onChanged: (searchedAlbum) {
//             setState(() {
//               sortedAlbums.removeWhere((album) =>
//                   !album.album.toLowerCase().contains(searchedAlbum));
//             });
//           },
//           decoration: InputDecoration(
//             focusColor: Colors.grey,
//             focusedBorder: OutlineInputBorder(
//               borderSide: const BorderSide(
//                 color: Colors.white,
//               ),
//               borderRadius: BorderRadius.circular(10),
//             ),
//             prefixIcon: const Icon(Icons.search),
//             hintText: "Search",
//             border: OutlineInputBorder(
//               borderSide: const BorderSide(
//                 color: Colors.grey,
//               ),
//               borderRadius: BorderRadius.circular(10),
//             ),
//           ),
//         ),
//         Expanded(
//           child: ListView.builder(
//             itemCount: sortedAlbums.length,
//             itemBuilder: (context, index) {
//               final data = sortedAlbums[index];
//               return Padding(
//                 padding: const EdgeInsets.all(8.0),
//                 child: CustomListTile(
//                   onTap: () async {
//                     fetchedSongs!.clear();
//                     fetchedSongs = await findSongsForAlbums(index);
//                     if (context.mounted) {
//                       TracksPage(
//                         songs: fetchedSongs,
//                         isOtherPage: true,
//                         appBarTitle: data.album,
//                       ).navigate(context);
//                     }
//                   },
//                   title: data.album,
//                   subtitle: data.numOfSongs.toString(),
//                 ),
//               );
//             },
//           ),
//         ),
//       ],
//     );
//   }
// }
import 'package:flutter/material.dart';
import 'package:on_audio_query/on_audio_query.dart';
import 'package:ui_challenge/constants.dart';

import '../tracks_page.dart';
import 'custom_list_tile.dart';

class AlbumsFoldersListViewBuilder extends StatefulWidget {
  final List<AlbumModel>? albums;
  final List<SongModel>? songs;

  const AlbumsFoldersListViewBuilder({
    super.key,
    required this.albums,
    required this.songs,
  });

  @override
  State<AlbumsFoldersListViewBuilder> createState() =>
      _AlbumsFoldersListViewBuilderState();
}

class _AlbumsFoldersListViewBuilderState
    extends State<AlbumsFoldersListViewBuilder> {
  List<AlbumModel> allAlbums = [];
  List<AlbumModel> filteredAlbums = [];
  List<SongModel>? fetchedSongs = [];
  @override
  void initState() {
    super.initState();

    // Initialize album lists and sort initially
    allAlbums = List.of(widget.albums!);

    allAlbums.sort((a, b) {
      final aIsNum = isNumericOnly(a.album);
      final bIsNum = isNumericOnly(b.album);

      if (aIsNum && !bIsNum) return 1;
      if (!aIsNum && bIsNum) return -1;
      return 0;
    });

    filteredAlbums = List.of(allAlbums);
  }

  Future<List<SongModel>> findSongsForAlbum(AlbumModel album) async {
    final List<SongModel> songsList = [];
    final String albumName = album.album.toLowerCase().trim();

    if (widget.songs == null) return [];

    for (final song in widget.songs!) {
      final segments = song.data.split('/');
      final folder = segments.length > 1 ? segments[segments.length - 2] : '';
      if (folder.toLowerCase().contains(albumName)) {
        songsList.add(song);
      }
    }

    return songsList;
  }

// Create a sorted copy of albums
  bool isNumericOnly(String? s) {
    if (s == null || s.isEmpty) return false;
    final numericRegex = RegExp(r'^\d+$');
    return numericRegex.hasMatch(s);
  }

  @override
  Widget build(BuildContext context) {
    final sortedAlbums = List.of(widget.albums!);

    sortedAlbums.sort((a, b) {
      final aIsNum = isNumericOnly(a.album);
      final bIsNum = isNumericOnly(b.album);

      if (aIsNum && !bIsNum) return 1; // a goes after b
      if (!aIsNum && bIsNum) return -1; // a goes before b
      return 0; // keep original order otherwise
    });
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 10,vertical: 5),
          child: TextFormField(
            onChanged: (searchedAlbum) {
              setState(() {
                final query = searchedAlbum.toLowerCase().trim();
                if (query.isEmpty) {
                  filteredAlbums = List.of(allAlbums);
                } else {
                  filteredAlbums = allAlbums
                      .where((album) => album.album
                          .toLowerCase()
                          .contains(query.toLowerCase()))
                      .toList();
                }
              });
            },
            decoration: InputDecoration(
              focusColor: Colors.grey,
              focusedBorder: OutlineInputBorder(
                borderSide: const BorderSide(
                  color: Colors.white,
                ),
                borderRadius: BorderRadius.circular(10),
              ),
              prefixIcon: const Icon(Icons.search),
              hintText: "Search",
              border: OutlineInputBorder(
                borderSide: const BorderSide(
                  color: Colors.grey,
                ),
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          ),
        ),
        Expanded(
          child: ListView.builder(
            itemCount: filteredAlbums.length,
            itemBuilder: (context, index) {
              final data = filteredAlbums[index];
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: CustomListTile(
                  onTap: () async {
                    fetchedSongs!.clear();
                    fetchedSongs = await findSongsForAlbum(data);
                    if (context.mounted) {
                      TracksPage(
                        songs: fetchedSongs,
                        isOtherPage: true,
                        appBarTitle: data.album,
                      ).navigate(context);
                    }
                  },
                  title: data.album,
                  subtitle: data.numOfSongs.toString(),
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}
